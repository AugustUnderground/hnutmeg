-- Hoogle documentation, generated by Haddock
-- See Hoogle, http://www.haskell.org/hoogle/


-- | Please see the README on GitHub at
--   <a>https://github.com/augustunderground/hnutmeg#readme</a>
@package hnutmeg
@version 0.2.2.0


-- | Read Binary Nutmeg Data
module Data.NutMeg

-- | Representation of NutMeg file contents, where plot names are mapped to
--   corresponding plot types and data.
data NutMeg
NutMeg :: !String -> !String -> !Map String NutPlot -> NutMeg

-- | Title of Plot
[nutTitle] :: NutMeg -> !String

-- | Data of Plot
[nutDate] :: NutMeg -> !String

-- | Plots contained within
[nutPlots] :: NutMeg -> !Map String NutPlot

-- | Convenient Transformer to Lazy ByteString nutFieldName' :: NutField
--   -&gt; BL.ByteString nutFieldName' = BL.fromStrict . nutFieldName
--   
--   A <tt>plot</tt> as it is represented within the NutMeg File format.
data NutPlot
NutPlot :: !String -> !Int -> !Int -> ![String] -> !NutPlotType -> !Map String NutWave -> NutPlot

-- | Plot Name
[nutPlotName] :: NutPlot -> !String

-- | Number of Variables
[nutNumVars] :: NutPlot -> !Int

-- | Number of data points per Variable
[nutNumPoints] :: NutPlot -> !Int

-- | Names of Variables
[nutVariables] :: NutPlot -> ![String]

-- | Real or Complex
[nutPlotType] :: NutPlot -> !NutPlotType

-- | Waveforms
[nutData] :: NutPlot -> !Map String NutWave

-- | NutMeg wave form data dypes
data NutWave

-- | Real valued (Double) wave form
NutRealWave :: {-# UNPACK #-} !Vector Double -> NutWave

-- | Complex valued (Complex Double) wave form
NutComplexWave :: {-# UNPACK #-} !Vector (Complex Double) -> NutWave

-- | Real and Complex NutMeg plots
data NutPlotType
NutRealPlot :: NutPlotType
NutComplexPlot :: NutPlotType

-- | Data Fields in NutMeg Files
data NutField

-- | Title of the plot, usually first line of netlist
NutTitle :: NutField

-- | Date of the plot
NutDate :: NutField

-- | Name of plot
NutPlotname :: NutField

-- | Real or Complex
NutFlags :: NutField

-- | No. Variables
NutNoVariables :: NutField

-- | No. Points per Variable
NutNoPoints :: NutField

-- | String representation of Variables
NutVariables :: NutField

-- | Binary Data, Double or Complex Double in Big Endian
NutBinData :: NutField

-- | Convenience function for reading a NutMeg File
readNutRaw :: FilePath -> IO ByteString

-- | Read and Prase NutMeg, ignoring file offset
readNutRaw' :: FilePath -> IO NutMeg

-- | Read and Prase NutMeg, considering file offset
readNutRawWithOffset' :: Int -> FilePath -> IO (NutMeg, Int)

-- | Returns a NutPlot for a given ByteString segment.
parseNutPlot :: [ByteString] -> NutPlot

-- | Parse all plots contained within a nutmeg file after title and date
parseNutPlots :: [ByteString] -> [NutPlot]

-- | Parse Nutmeg content
parseNutMeg :: Int -> ByteString -> (NutMeg, Int)

-- | Parse nutmeg content with offset and return new offset
parseNutMeg' :: [ByteString] -> NutMeg

-- | Translate fieldname to ByteString representation in NutMeg file.
nutFieldName :: NutField -> ByteString

-- | Construct NutPlot type
nutPlot :: String -> NutPlotType -> Int -> Int -> [String] -> ByteString -> NutPlot

-- | Convert a flag from file to plot type
nutFlag :: String -> NutPlotType

-- | Convert a nut wave to either real or complex valued Vector
nutWave :: NutWave -> Either (Vector (Complex Double)) (Vector Double)

-- | Convert a nut wave to a Real valued Vector
nutRealWave :: NutWave -> Maybe (Vector Double)

-- | Convert a nut wave to a Real valued Vector
asRealVector :: NutWave -> Vector Double

-- | Convert to Complex valued Vector
nutComplexWave :: NutWave -> Maybe (Vector (Complex Double))

-- | Convert to Complex valued Vector
asComplexVector :: NutWave -> Vector (Complex Double)

-- | Read block of real data
readRealBinary :: ByteString -> [Double]

-- | Read block of complex data
readComplexBinary :: ByteString -> [Complex Double]

-- | Concatenate complex nut waves
concatComplexWaves :: [NutWave] -> NutWave

-- | Convenience for zipping complex waves
joinComplexWaves :: NutWave -> NutWave -> NutWave

-- | Concatenate Data of plots with same variable names
flattenRealPlots :: [NutPlot] -> NutPlot

-- | Flatten plots with same variable names
flattenComplexPlots :: [NutPlot] -> NutPlot
instance Control.DeepSeq.NFData Data.NutMeg.NutWave
instance GHC.Generics.Generic Data.NutMeg.NutWave
instance GHC.Classes.Eq Data.NutMeg.NutWave
instance GHC.Show.Show Data.NutMeg.NutWave
instance Control.DeepSeq.NFData Data.NutMeg.NutPlotType
instance GHC.Generics.Generic Data.NutMeg.NutPlotType
instance GHC.Classes.Eq Data.NutMeg.NutPlotType
instance GHC.Show.Show Data.NutMeg.NutPlotType
instance Control.DeepSeq.NFData Data.NutMeg.NutField
instance GHC.Generics.Generic Data.NutMeg.NutField
instance GHC.Enum.Bounded Data.NutMeg.NutField
instance GHC.Classes.Ord Data.NutMeg.NutField
instance GHC.Enum.Enum Data.NutMeg.NutField
instance GHC.Classes.Eq Data.NutMeg.NutField
instance GHC.Show.Show Data.NutMeg.NutField
instance Control.DeepSeq.NFData Data.NutMeg.NutPlot
instance GHC.Generics.Generic Data.NutMeg.NutPlot
instance GHC.Show.Show Data.NutMeg.NutPlot
instance Control.DeepSeq.NFData Data.NutMeg.NutMeg
instance GHC.Generics.Generic Data.NutMeg.NutMeg
instance GHC.Show.Show Data.NutMeg.NutMeg
