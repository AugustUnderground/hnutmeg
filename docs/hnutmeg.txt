-- Hoogle documentation, generated by Haddock
-- See Hoogle, http://www.haskell.org/hoogle/


-- | Please see the README on GitHub at
--   <a>https://github.com/augustunderground/hnutmeg#readme</a>
@package hnutmeg
@version 0.3.7.0


-- | Read Binary NutMeg Data
module Data.NutMeg

-- | A NutMeg file consists of a list of <tt><a>Plot</a></tt>s
--   <tt>[(Plotname, </tt><a>Plot</a>@)] Plotnames do <i>not</i> have to be
--   unique in a NutMeg file. Data may be lost by turning this into a
--   <a>Map</a>.
type NutMeg = [(String, Plot)]

-- | A <i>Plot</i> inside a <tt><a>NutMeg</a></tt> file consists of
--   uniquely identified waveforms: <tt>[(Variable Name, Waveform)]</tt>
type Plot = Map String Wave

-- | Type alias for real valued <tt><a>Plot</a></tt>
type RealPlot = Map String (Vector Double)

-- | Type alias for complex valued <tt><a>Plot</a></tt>
type ComplexPlot = Map String (Vector (Complex Double))

-- | Wrapper around Real or Complex valued Vector, so they can be stored in
--   the same List.
data Wave

-- | Real valued (<a>Double</a>) wave form
RealWave :: {-# UNPACK #-} !Vector Double -> Wave

-- | Complex valued ('Complex Double') wave form
ComplexWave :: {-# UNPACK #-} !Vector (Complex Double) -> Wave

-- | Flag indicating whether a plot is real or complex valued
data Flag

-- | Real valued (<a>Double</a>) plot
Real' :: Flag

-- | Complex valued ('Complex Double') plot
Complex' :: Flag

-- | Data Field identifier in NutMeg (binary) Files
data Field

-- | Title of the <tt><a>NutMeg</a></tt> file, usually first line of
--   netlist
Title :: Field

-- | Date of creation
Date :: Field

-- | Name of a <tt><a>Plot</a></tt>
Plotname :: Field

-- | Whether the <tt><a>Plot</a></tt> is <tt><a>Real</a></tt> or
--   <tt><a>Complex</a></tt>
Flags :: Field

-- | No. Variables in the <tt><a>Plot</a></tt>
NoVariables :: Field

-- | No. Points per Variable
NoPoints :: Field

-- | String representation of Variables in the <tt><a>Plot</a></tt>
Variables :: Field

-- | Binary Data, <a>Double</a> or 'Complex Double' encoded in Big Endian
Binary :: Field

-- | Read a binary nutmeg .raw file
readFile :: FilePath -> IO NutMeg

-- | Read The first plot encountered in ByteString String: <tt>((Plotname,
--   <a>Plot</a>), Remianing ByteString)</tt>
extractPlots :: ByteString -> NutMeg -> NutMeg

-- | Extract the wave forms from binary data given header information
extractPlot :: Flag -> Int -> Int -> ByteString -> [Wave]

-- | Extract <tt><a>Plot</a></tt> header information: <tt>((Plotname,
--   <a>Flag</a>, No. Variables, No. Points), [Variable Names])</tt>
parseHeader :: [ByteString] -> ((String, Flag, Int, Int), [String])

-- | Read a <tt><a>NutMeg</a></tt> field from a ByteString
readField :: Field -> ByteString -> String

-- | Convert Waveform to unboxed <a>Vector</a>, fails horribly if types are
--   incorrect
asVector :: Wave -> Either (Vector (Complex Double)) (Vector Double)

-- | Get rid of <tt><a>Wave</a></tt> type and convert to either 'Complex
--   Double' or <a>Double</a> Vector, depending on Wave type.
vectorize :: Plot -> Either ComplexPlot RealPlot

-- | Concatenate the <tt><a>Wave</a></tt>s of a given list of
--   <tt><a>Plot</a></tt> names. This will only work if the keys line up.
flattenPlots :: [String] -> NutMeg -> Plot

-- | Concatenate waves of all <tt><a>Plot</a></tt>s in
--   <tt><a>NutMeg</a></tt>. Probably won't work as intended when variable
--   names of the <tt><a>Plot</a></tt>s don't line up
flattenPlots' :: NutMeg -> Plot

-- | Unsafe extraction of <a>Right</a> value for real valued plots. Check
--   with <tt><a>isReal</a></tt> before using, to be sure
asRealPlot :: Plot -> RealPlot

-- | Unsafe extraction of <a>Left</a> value for complex valued plots. Check
--   with <tt><a>isComplex</a></tt> before using, to be sure
asComplexPlot :: Plot -> ComplexPlot

-- | Joins two <tt><a>Wave</a></tt>s of the same type: <tt>wave1 ++
--   wave2</tt> Attempting to concatenate a Real and Complex wave will
--   result in an error
concat :: Wave -> Wave -> Wave

-- | Check whether Plot is real valued
isReal :: Plot -> Bool

-- | Check whether Plot is complex valued
isComplex :: Plot -> Bool

-- | Check whether waveform is real valued
isReal' :: Wave -> Bool

-- | Check whether waveform is complex valued
isComplex' :: Wave -> Bool

-- | Swap Bytes of Big-Endian encoded ByteString Thanks Noughtmare:
--   <a>https://stackoverflow.com/a/71341067</a>
byteSwap :: ByteString -> ByteString

-- | Swap bytes and cast to vector (slow)
castByteStringToVector :: Storable a => ByteString -> Vector a
instance Control.DeepSeq.NFData Data.NutMeg.Field
instance GHC.Generics.Generic Data.NutMeg.Field
instance GHC.Enum.Bounded Data.NutMeg.Field
instance GHC.Classes.Ord Data.NutMeg.Field
instance GHC.Enum.Enum Data.NutMeg.Field
instance GHC.Classes.Eq Data.NutMeg.Field
instance Control.DeepSeq.NFData Data.NutMeg.Flag
instance GHC.Generics.Generic Data.NutMeg.Flag
instance GHC.Enum.Bounded Data.NutMeg.Flag
instance GHC.Classes.Eq Data.NutMeg.Flag
instance Control.DeepSeq.NFData Data.NutMeg.Wave
instance GHC.Generics.Generic Data.NutMeg.Wave
instance GHC.Classes.Eq Data.NutMeg.Wave
instance GHC.Show.Show Data.NutMeg.Wave
instance GHC.Read.Read Data.NutMeg.Flag
instance GHC.Show.Show Data.NutMeg.Flag
instance GHC.Show.Show Data.NutMeg.Field
