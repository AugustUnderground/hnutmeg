-- Hoogle documentation, generated by Haddock
-- See Hoogle, http://www.haskell.org/hoogle/


-- | Please see the README on GitHub at
--   <a>https://github.com/augustunderground/hnutmeg#readme</a>
@package hnutmeg
@version 0.1.0.0

module Data.NutMeg

-- | Representation of NutMeg file contents, where plot names are mapped to
--   corresponding plot types and data.
data NutMeg
NutMeg :: String -> String -> !Map String NutPlot -> NutMeg
[nutTitle] :: NutMeg -> String
[nutDate] :: NutMeg -> String
[nutPlots] :: NutMeg -> !Map String NutPlot

-- | A <tt>plot</tt> as it is represented within the NutMeg File format.
data NutPlot
NutPlot :: String -> Int -> Int -> [String] -> NutPlotType -> !Map String NutWave -> NutPlot
[nutPlotName] :: NutPlot -> String
[nutNumVars] :: NutPlot -> Int
[nutNumPoints] :: NutPlot -> Int
[nutVariables] :: NutPlot -> [String]
[nutPlotType] :: NutPlot -> NutPlotType
[nutData] :: NutPlot -> !Map String NutWave

-- | NutMeg wave form data dypes
data NutWave
NutRealWave :: {-# UNPACK #-} !Vector Double -> NutWave
NutComplexWave :: {-# UNPACK #-} !Vector (Complex Double) -> NutWave

-- | Real and Complex NutMeg plots
data NutPlotType
NutRealPlot :: NutPlotType
NutComplexPlot :: NutPlotType

-- | Data Fields in NutMeg Files
data NutField
NutTitle :: NutField
NutDate :: NutField
NutPlotname :: NutField
NutFlags :: NutField
NutNoVariables :: NutField
NutNoPoints :: NutField
NutVariables :: NutField
NutBinData :: NutField

-- | Translate fieldname to ByteString representation in NutMeg file.
nutFieldName :: NutField -> ByteString

-- | Convenient Transformer to Lazy ByteString
nutFieldName' :: NutField -> ByteString

-- | How many bytes per real data point
bytesPerReal :: Int

-- | Convenient transformation to Int64 for certain calculations
bytesPerReal' :: Int64

-- | How many bytes per complex data point
bytesPerComplex :: Int

-- | Convenient transformation to Int64 for certain calculations
bytesPerComplex' :: Int64

-- | Get the first NutMeg Element and the Rest
popNutElement :: NutField -> ByteString -> (Maybe ByteString, ByteString)

-- | Read a row of real valued data
readNutRealRow :: Int64 -> Int -> ByteString -> Vector Double

-- | Read a row of complex valued data
readNutComplexRow :: Int64 -> Int -> ByteString -> Vector (Complex Double)

-- | Construct NutPlot type
nutPlot :: String -> NutPlotType -> Int -> Int -> [String] -> ByteString -> NutPlot

-- | Convert a flag from file to plot type
nutFlag :: String -> NutPlotType
nutWave :: NutWave -> Either (Vector (Complex Double)) (Vector Double)
nutRealWave :: NutWave -> Maybe (Vector Double)
asRealVector :: NutWave -> Vector Double
nutComplexWave :: NutWave -> Maybe (Vector (Complex Double))
asComplexVector :: NutWave -> Vector (Complex Double)
flattenRealPlots :: [NutPlot] -> NutPlot
flattenComplexPlots :: [NutPlot] -> NutPlot

-- | Returns a NutPlot for a given ByteString segment.
parseNutPlot :: ByteString -> NutPlot

-- | Returns a NutMeg for given file contents.
parseNutMeg :: ByteString -> NutMeg

-- | Convenience function for reading a NutMeg File
readNutRaw :: FilePath -> IO ByteString
instance GHC.Classes.Eq Data.NutMeg.NutWave
instance GHC.Show.Show Data.NutMeg.NutWave
instance GHC.Classes.Eq Data.NutMeg.NutPlotType
instance GHC.Show.Show Data.NutMeg.NutPlotType
instance GHC.Enum.Bounded Data.NutMeg.NutField
instance GHC.Classes.Ord Data.NutMeg.NutField
instance GHC.Enum.Enum Data.NutMeg.NutField
instance GHC.Classes.Eq Data.NutMeg.NutField
instance GHC.Show.Show Data.NutMeg.NutField
instance GHC.Show.Show Data.NutMeg.NutPlot
instance GHC.Show.Show Data.NutMeg.NutMeg
